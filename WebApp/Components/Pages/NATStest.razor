@page "/natstest"
@using NATS.Client.Core
@rendermode InteractiveServer

@inject INatsConnection _connection;
@inject ILogger<NATStest> _logger;

@* @inject HttpClient Http *@
@inject INatsSubscriptionStats _subscriptionStats;

<PageTitle>NATS</PageTitle>

<h1>NATS</h1>

<input type="text" class="form-control" placeholder="Type something..." @bind-value="_message" style="margin: 0.5rem;" />
<button class="btn btn-primary" style="margin: 0.5rem;" @onclick="SendMessage">Send message</button>

@if (_sent)
{
    <span style="color: green; margin-left: 0.5rem;">Message sent!</span>
}

<div style="margin-top: 2rem;">
    <h5>NATS Stats</h5>
    @if (_stats != null)
    {
        <div>
            <span style="margin-right:1rem;">Total Messages Received: <b>@_stats.TotalMessagesReceived</b></span>
            <span>Total Errors: <b>@_stats.TotalErrors</b></span>
        </div>
    }
    else
    {
        <span>Loading stats...</span>
    }
</div>

@code {
    private string _message = string.Empty;
    private bool _sent = false;
    private bool _sending = false;

    private NatsStats? _stats;
    private Timer? _statsTimer;

    protected override void OnInitialized()
    {
        _stats = new NatsStats();
        _subscriptionStats.MessageReceived += (sender, args) =>
        {
            _stats.TotalMessagesReceived = _subscriptionStats.TotalMessagesReceived;
            _stats.TotalErrors = _subscriptionStats.TotalErrors;
            InvokeAsync(StateHasChanged);
        };
    }


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_message)) return;
        _sending = true;
        _sent = false;
        StateHasChanged();

        try
        {
            _logger.LogInformation("Sending message: {Message}", _message);
            await _connection.PublishAsync("test.topic", _message);

            _logger.LogInformation("Message sent: {Message}", _message);
            _sent = true;
            _message = string.Empty;
        }
        finally
        {
            _sending = false;
            StateHasChanged();
            // Hide feedback after 1.5 seconds
            await Task.Delay(1500);
            _sent = false;
            StateHasChanged();
        }
    }

    public class NatsStats
    {
        public int TotalMessagesReceived { get; set; }
        public int TotalErrors { get; set; }
    }

    public void Dispose()
    {
        _statsTimer?.Dispose();
    }
}
